var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Vector3 = Laya.Vector3;
var uiview;
(function (uiview) {
    var gameView = /** @class */ (function (_super) {
        __extends(gameView, _super);
        function gameView(msg) {
            if (msg === void 0) { msg = null; }
            var _this = _super.call(this) || this;
            _this.m_client = null;
            _this.hands = [];
            _this.outs = [];
            _this.recordMsg = null;
            _this.m_rest = 0;
            _this.recordMsg = msg;
            gameView.instance = _this;
            Laya.loader.load(game.uiAtlas.tiles, Laya.Handler.create(_this, _this.onLoaded));
            //wan tiao tong
            var chips = _this.btns.getChildAt(0);
            for (var i = 0; i < chips.numChildren; ++i) {
                chips.getChildAt(i).on(Laya.Event.CLICK, _this, _this.onBtnChip, [i]);
            }
            _this.blocks.getChildAt(1).on(Laya.Event.CLICK, _this, _this.onBtnPeng);
            _this.blocks.getChildAt(3).on(Laya.Event.CLICK, _this, _this.onBtnHu);
            _this.blocks.getChildAt(4).on(Laya.Event.CLICK, _this, _this.onBtnPass);
            _this.deskInfo.getChildAt(0).text = game.gameInfo.deskPwd + "";
            _this.exchange.getChildAt(1).on(Laya.Event.CLICK, _this, _this.onBtnExchange);
            _this.btnSet.on(Laya.Event.CLICK, _this, _this.onBtnSet);
            return _this;
        }
        gameView.prototype.onLoaded = function () {
            Laya.loader.create("res/models/LayaScene_main/main.ls", Laya.Handler.create(this, this.modelLoaded));
            //this.clearUI();
        };
        gameView.prototype.modelLoaded = function () {
            this.scene = Laya.loader.getRes("res/models/LayaScene_main/main.ls");
            Laya.stage.addChild(this.scene);
            Laya.stage.setChildIndex(this.scene, 0);
            for (var i = 0; i < 4; ++i) {
                var hand = this.scene.getChildByName("hand" + i);
                var handCtrl = hand.addComponent(script.handCtrl);
                handCtrl.setView(i);
                this.hands.push(hand);
                var out = this.scene.getChildByName("out" + i);
                out.addComponent(script.outCtrl);
                this.outs.push(out);
            }
            this.wall = this.scene.getChildByName("wall");
            var wallCtrl = this.wall.addComponent(script.wallCtrl);
            //this.wall.transform.localRotationEuler  = new Vector3(0,-90,0);
            console.log("init over");
            this.m_client = new game.gameClient();
        };
        gameView.prototype.setDeskInfo = function (data) {
            this.deskInfo.getChildByName("cur").text = data.current_round_ + 1;
            this.m_client.m_status = data.desk_status_;
        };
        gameView.prototype.setPlayerInfo = function (data) {
            for (var i = 0; i < data.length; ++i) {
                this.players.getChildAt(this.vStation(i)).getChildByName("head").loadImage(network.http.webRoot + "/Image/head/" + data[i].userId + "_head.png", 0, 0, 64, 64);
                this.players.getChildAt(this.vStation(i)).getChildByName("nick").loadImage(network.http.webRoot + "/Image/name/" + data[i].userId + ".png");
                this.players.getChildAt(this.vStation(i)).getChildByName("money").text = data[i].temp_chip + "";
            }
        };
        gameView.prototype.setStatus = function (desk, stat) {
            var sp = this.players.getChildAt(this.vStation(desk)).getChildByName("status");
            sp.graphics.clear();
            sp.graphics.drawTexture(Laya.loader.getRes(game.uiAtlas.tiles[stat]));
        };
        gameView.prototype.setNt = function (desk) {
            for (var i = 0; i < this.players.numChildren; ++i) {
                var v = this.vStation(desk);
                this.players.getChildAt(i).getChildByName("nt").visible = v === i;
            }
        };
        gameView.prototype.showChips = function (bShow) {
            this.btns.getChildAt(0).visible = bShow;
        };
        gameView.prototype.onBtnChip = function (val) {
            var data = {
                byUser: this.m_client.m_myDesk,
                byQue: val,
                byQuePai: [255, 255, 255, 255],
                bNotify: false,
                bFinish: [false, false, false, false]
            };
            this.m_client.m_ws.Send(180, 26, data);
        };
        gameView.prototype.onBtnChi = function () {
        };
        gameView.prototype.onBtnPeng = function () {
            var data = {
                byUser: this.m_client.m_myDesk,
                byBePeng: this.m_client.m_curPlayer,
                byPs: this.m_client.m_lastTile
            };
            this.m_client.m_ws.Send(180, 31, data);
        };
        gameView.prototype.onBtnHu = function () {
            var data = {
                byUser: this.m_client.m_myDesk,
                byDianPao: this.m_client.m_curPlayer,
                byPs: this.m_client.m_lastTile
            };
            this.m_client.m_ws.Send(180, 36, data);
        };
        gameView.prototype.onBtnPass = function () {
            this.blocks.visible = false;
            this.m_client.m_ws.SendEmpty(180, 75);
        };
        gameView.prototype.onBack = function () {
            var _this = this;
            Laya.loader.load(game.uiAtlas.home, Laya.Handler.create(this, function () {
                var home = new uiview.home.homeView();
                Laya.stage.addChild(home);
                _this.removeSelf();
                for (var i = 0; i < game.uiAtlas.game.length; ++i) {
                    Laya.loader.clearRes(game.uiAtlas.game[i]);
                }
                for (var i = 0; i < game.uiAtlas.tiles.length; ++i) {
                    Laya.loader.clearRes(game.uiAtlas.tiles[i]);
                }
            }));
        };
        gameView.prototype.onBtnExchange = function () {
            var arrStr = this.exchange.getChildAt(0).text.split(" ");
            var arrVal = new Array();
            arrStr.forEach(function (v, idx, a) {
                arrVal.push(parseInt(v));
            });
            var data = {
                value: arrVal
            };
            if (data.value.length > 2) {
                this.m_client.m_ws.Send(180, 119, data);
            }
            else {
                this.m_client.m_ws.Send(180, 120, data);
            }
        };
        gameView.prototype.onBtnSet = function () {
            this.viewSet.showSet();
        };
        gameView.prototype.gameBegin = function () {
            this.showFin(false);
        };
        gameView.prototype.showFin = function (bShow) {
            this.fin.visible = bShow;
            if (bShow) {
            }
        };
        gameView.prototype.showDismiss = function (bShow) {
            if (bShow)
                this.viewSet.showDismiss();
            else
                this.viewSet.visible = false;
        };
        gameView.prototype.vStation = function (desk) {
            return ((desk + game.gameInfo.max_people + 1 - this.m_client.m_myDesk) % game.gameInfo.max_people);
        };
        gameView.prototype.makeWalls = function (count) {
            this.wall.getComponentByType(script.wallCtrl).sortChildren();
        };
        gameView.prototype.sendCards = function (data) {
            for (var i = 0; i < game.gameInfo.max_people; ++i) {
                for (var j = 0; j < data.m_byArHandPai[i].length; ++j) {
                    if (data.m_byArHandPai[i][j] == 255)
                        break;
                    if (data.m_byArHandPai[i][j] != 0) {
                        var sp = this.getAWallCard(data.m_byArHandPai[i][j]);
                        this.hands[this.vStation(i)].getComponentByType(script.handCtrl).addCard(sp);
                    }
                    else {
                        var sp = this.wall.removeChildAt(this.wall.numChildren - 1);
                        this.hands[this.vStation(i)].getComponentByType(script.handCtrl).justAddCard(sp);
                    }
                }
            }
            //this.players.getChildAt(this.vStation(game.gameClient.instance.m_myDesk)).addChild(this.create2DCards(data.m_byArHandPai[this.m_client.m_myDesk], null));
        };
        //用于断线重连的,出的牌不在手上
        gameView.prototype.setOutCard = function (data) {
            for (var i = 0; i < game.gameInfo.max_people; ++i) {
                for (var j = 0; j < data.outpai_[i].length; ++j) {
                    if (data.outpai_[i][j] == 255) {
                        break;
                    }
                    var view = this.vStation(i);
                    var o = this.getAWallCard(data.outpai_[i][j]);
                    this.outs[view].getComponentByType(script.outCtrl).addCard(o);
                }
            }
        };
        //断线重连
        gameView.prototype.setBlock = function (data) {
            //data.byType;
            var view = this.vStation(data.iStation);
            var arr = new Array();
            for (var i = 0; i < data.byData.length; ++i) {
                if (data.byData[i] == 255)
                    break;
                var sp = this.getAWallCard(data.byData[i]);
                if (sp == null)
                    return;
                arr.push(sp);
                //var sp = this.getACardInHand()
            }
            this.hands[view].getComponentByType(script.handCtrl).addOneBlock(arr);
        };
        //一张一张出的牌
        gameView.prototype.outCard = function (data) {
            var desk = data.byUser;
            var view = this.vStation(desk);
            var o;
            if (desk == this.m_client.m_myDesk) {
                o = this.getMyHandCard(data.byPs);
            }
            else {
                o = this.getAHandCard(data.byPs, view);
            }
            this.outs[view].getComponentByType(script.outCtrl).addCard(o);
        };
        gameView.prototype.zhuaPai = function (data) {
            var desk = data.byUser;
            var view = this.vStation(desk);
            var o;
            if (data.byPs != 255) {
                o = this.getAWallCard(data.byPs);
                this.hands[view].getComponentByType(script.handCtrl).addCard(o);
            }
            else {
                o = this.wall.removeChildAt(this.wall.numChildren - 1);
                this.hands[view].getComponentByType(script.handCtrl).justAddCard(o);
            }
        };
        gameView.prototype.notifyBlock = function (data) {
            var _this = this;
            if (data.bCanAction) {
                this.blocks.visible = true;
                this.blocks.getChildAt(0).visible = data.bChi;
                this.blocks.getChildAt(1).visible = data.bPeng;
                this.blocks.getChildAt(2).visible = data.bGang;
                this.blocks.getChildAt(3).visible = data.bHu;
                this.blocks.getChildAt(this.blocks.numChildren - 1).visible = true;
                if (data.bGang) {
                    this.blocks.getChildAt(2).on(Laya.Event.CLICK, this, function () {
                        var d = {
                            byUser: _this.m_client.m_myDesk,
                            byBeGang: _this.m_client.m_curPlayer,
                            byType: data.m_iGangData[0][0],
                            byPs: data.m_iGangData[0][1]
                        };
                        _this.m_client.m_ws.Send(180, 34, d);
                    });
                }
            }
        };
        gameView.prototype.notifyHu = function (data) {
            this.blocks.visible = false;
            if (!data.bZimo) {
                var sp = this.outs[this.vStation(data.byDianPao)].getComponentByType(script.outCtrl).getLastOutCard();
                this.hands[this.vStation(data.byUser)].getComponentByType(script.handCtrl).justAddCard(sp);
            }
        };
        gameView.prototype.addBlock = function (data) {
            this.blocks.visible = false;
            var view = this.vStation(data.byUser);
            this.showTimer(data.byUser, 20);
            var arr = new Array();
            switch (data.byType) {
                case 2:
                    //peng
                    if (data.byUser == this.m_client.m_myDesk) {
                        var sp1 = this.getMyHandCard(data.byPs);
                        var sp2 = this.getMyHandCard(data.byPs);
                        var sp3 = this.outs[this.vStation(data.beUser)].getComponentByType(script.outCtrl).getLastOutCard();
                        arr.push(sp1);
                        arr.push(sp2);
                        arr.push(sp3);
                    }
                    else {
                        var sp1 = this.getAHandCard(data.byPs, view);
                        var sp2 = this.getAHandCard(data.byPs, view);
                        var sp3 = this.outs[this.vStation(data.beUser)].getComponentByType(script.outCtrl).getLastOutCard();
                        arr.push(sp1);
                        arr.push(sp2);
                        arr.push(sp3);
                    }
                    break;
                case 4:
                    //an gang
                    if (data.byUser == this.m_client.m_myDesk) {
                        var sp1 = this.getMyHandCard(data.byPs);
                        var sp2 = this.getMyHandCard(data.byPs);
                        var sp3 = this.getMyHandCard(data.byPs);
                        var sp4 = this.getMyHandCard(data.byPs);
                        arr.push(sp1);
                        arr.push(sp2);
                        arr.push(sp3);
                        arr.push(sp4);
                    }
                    else {
                        var sp1 = this.getAHandCard(data.byPs, view);
                        var sp2 = this.getAHandCard(data.byPs, view);
                        var sp3 = this.getAHandCard(data.byPs, view);
                        var sp4 = this.getAHandCard(data.byPs, view);
                        arr.push(sp1);
                        arr.push(sp2);
                        arr.push(sp3);
                        arr.push(sp4);
                    }
                case 5:
                    //bu gang
                    if (data.byUser == this.m_client.m_myDesk) {
                        var sp = this.getMyHandCard(data.byPs);
                        arr.push(sp);
                    }
                    else {
                        var sp = this.getAHandCard(data.byPs, view);
                        arr.push(sp);
                    }
                    break;
                case 6:
                    //ming gang
                    if (data.byUser == this.m_client.m_myDesk) {
                        var sp1 = this.getMyHandCard(data.byPs);
                        var sp2 = this.getMyHandCard(data.byPs);
                        var sp3 = this.getMyHandCard(data.byPs);
                        var sp4 = this.outs[this.vStation(data.beUser)].getComponentByType(script.outCtrl).getLastOutCard();
                        arr.push(sp1);
                        arr.push(sp2);
                        arr.push(sp3);
                        arr.push(sp4);
                    }
                    else {
                        var sp1 = this.getAHandCard(data.byPs, view);
                        var sp2 = this.getAHandCard(data.byPs, view);
                        var sp3 = this.getAHandCard(data.byPs, view);
                        var sp4 = this.outs[this.vStation(data.beUser)].getComponentByType(script.outCtrl).getLastOutCard();
                        arr.push(sp1);
                        arr.push(sp2);
                        arr.push(sp3);
                        arr.push(sp4);
                    }
                    break;
            }
            this.hands[view].getComponentByType(script.handCtrl).addOneBlock(arr);
        };
        gameView.prototype.exchangePos = function (o1, o2) {
            var tPos = o1.transform.localPosition;
            var tRot = o1.transform.localRotationEuler;
            o1.transform.localPosition = o2.transform.localPosition;
            o1.transform.localRotationEuler = o2.transform.localRotationEuler;
            o2.transform.localPosition = tPos;
            o2.transform.localRotationEuler = tRot;
        };
        //找到一张牌和手牌中的最后一张交换(并移除)
        gameView.prototype.getAHandCard = function (val, view) {
            var idx = this.wall.getComponentByType(script.wallCtrl).getChildByVal(val);
            if (idx != -1) {
                var last = this.hands[view].removeChildAt(this.hands[view].numChildren - 1);
                var sp = this.wall.removeChildAt(idx);
                this.wall.addChildAt(last, idx);
                this.exchangePos(sp, last);
                return sp;
            }
            for (var i = 0; i < this.hands.length; ++i) {
                if (i == 1)
                    continue;
                var sp = this.hands[i].getComponentByType(script.handCtrl).removeCard(val);
                if (sp == null)
                    continue;
                if (i != view) {
                    var last = this.hands[view].removeChildAt(this.hands[view].numChildren - 1);
                    this.exchangePos(last, sp);
                    this.hands[i].getComponentByType(script.handCtrl).justAddCard(last);
                }
                //else pos
                return sp;
            }
            console.log("can not find card " + val);
            return null;
        };
        //找到一张牌和牌墙的最后一张牌交换(并移除)
        gameView.prototype.getAWallCard = function (val) {
            var idx = this.wall.getComponentByType(script.wallCtrl).getChildByVal(val);
            if (idx != -1) {
                var last = this.wall.getChildAt(this.wall.numChildren - 1);
                var sp = this.wall.removeChildAt(idx);
                if (idx < this.wall.numChildren) {
                    this.exchangePos(last, sp);
                    this.wall.setChildIndex(last, idx);
                    // last.transform.localPosition = sp.transform.localPosition;
                    // last.transform.localRotationEuler = sp.transform.localRotationEuler;
                }
                //sp.pos
                return sp;
            }
            for (var i = 0; i < this.hands.length; ++i) {
                if (i == 1)
                    continue;
                var sp = this.hands[i].getComponentByType(script.handCtrl).removeCard(val);
                if (sp == null)
                    continue;
                var last = this.wall.removeChildAt(this.wall.numChildren - 1);
                this.exchangePos(last, sp);
                this.hands[i].getComponentByType(script.handCtrl).justAddCard(last);
                return sp;
            }
            console.log("can not find card " + val + " in wall");
            return null;
        };
        gameView.prototype.getMyHandCard = function (val) {
            var o = this.hands[1].getComponentByType(script.handCtrl).removeCard(val);
            if (o == null) {
                o = this.getAHandCard(val, 1);
            }
            return o;
        };
        gameView.prototype.clearUI = function () {
            this.blocks.visible = false;
            this.showFin(false);
            this.showChips(false);
            for (var i = 0; i < game.gameInfo.max_people; ++i) {
                this.players.getChildAt(i).getChildByName("money").visible = false;
            }
        };
        gameView.prototype.showTimer = function (desk, time) {
            this.m_rest = time;
            var timer = this.scene.getChildByName("desk").getChildByName("timer");
            var view = this.vStation(desk);
            timer._childs.forEach(function (o, idx, arr) {
                o.active = (idx == view);
            });
            Laya.timer.loop(1000, this, this._updateTimer);
        };
        gameView.prototype._updateTimer = function () {
            --this.m_rest;
            if (this.m_rest < 0) {
                Laya.timer.clear(this, this._updateTimer);
                return;
            }
        };
        gameView.prototype.create2DCards = function (data, cpg) {
            var p = new Laya.Sprite();
            var idx = 0;
            //cpg...
            //hand
            for (var i = 0; i < data.length; ++i) {
                if (data[i] == 255)
                    break;
                var sp = this.create2dmah(data[i]);
                sp.pos(idx + i * sp.width, 0);
                p.addChild(sp);
            }
            return p;
        };
        gameView.prototype.create2dmah = function (val) {
            var sp = new Laya.Image();
            sp.skin = "small_mj/outcard_bg.png";
            var v = new Laya.Image();
            v.skin = "small_mj/" + val + ".png";
            v.pos((sp.width - v.width) * 0.5, (sp.height - v.height) * 0.5 - 6);
            sp.addChild(v);
            return sp;
        };
        gameView.instance = null;
        return gameView;
    }(ui.gameViewUI));
    uiview.gameView = gameView;
})(uiview || (uiview = {}));
//# sourceMappingURL=gameView.js.map